#!/usr/bin/env python3

import tornado.ioloop
import tornado.web

class Datastore(object):
    def __init__(self):
        self._stats = {}
        self.summarizers = []

    def set(self, host, label, value, timestamp):
        if host not in self._stats:
            self._stats[host] = {}
            self.add_summarizer(host, "by-minute", oldest_epoch_milliseconds = 60*60*1000, callback_interval = 60*1000)
            self.add_summarizer(host, "by-hour", oldest_epoch_milliseconds = 24*60*60*1000, callback_interval = 60*60*1000)

        if label not in self._stats[host]:
            self._stats[host][label] = []
        self._stats[host][label].append((value, timestamp))

    def add_summarizer(host, summary_label, oldest_epoch_milliseconds, callback_interval):
        s = functools.partial(self._summarize, host, summary_label, oldest_epoch_milliseconds)
        s = ioloop.PeriodicCallback(s, callback_interval)
        s.start()
        self.summarizers.append(s)

    def _summarize(self, host, summary_label, oldest_epoch_milliseconds):
        for label in self._stats[host]:
            _sum = 0
            _count = 0
            summary_label = "%s:%s" % (summary_label, label)
            self._stats[host][summary_label] = []
            for v, ts in self._stats[host][label]:
                if ts <= oldest_epoch_milliseconds:
                    self._stats[host][summary_label].append((v, ts))
                    _count += 1
                    _sum += v
                elif ts > oldest_epoch_milliseconds:
                    break
            self._stats[host][summary_label] = {
                "avg": (_sum / _count),
                "sum": _sum,
                "count": _count,
                "data": self._stats[host][summary_label]
            }

class PerformanceDataHandler(tornado.web.RequestHandler):
    def initialize(self, datastore):
        self.datastore = datastore

    @tornado.web.asynchronous
    def post(self):
        ioloop.IOLoop.instance().add_callback(on_submit, self)

    def submit(self):
        # parse request
        # for each metric, call self.datastore.set(key, val, ts)
        pass

    def respond(self, response):
        if response.error: raise tornado.web.HTTPError(500)
        json = tornado.escape.json_decode(response.body)
        self.write("Fetched " + str(len(json["entries"])) + " entries "
                   "from the FriendFeed API")
        self.finish()

def NewLizReciever():
    return tornado.web.Application([
        (r"/perf-endpoint1", PerformanceDataHandler),
        (r"/perf-endpoint2", PerformanceDataHandler),
    ])

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--port", dest="port", type=int, help="HTTP Port to recieve on")
    app = NewLizReciever()
    app.listen(args.port)
    tornado.ioloop.IOLoop.current().start()
else:
    sys.stderr.write("ERROR:  This is not a module and should not be imported")
    sys.exit(1)
