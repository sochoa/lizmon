#!/usr/bin/env python3
# :vim set ft=python

import functools
import argparse
import json
from urllib.parse import urljoin

import tornado.httpclient as http
import tornado.ioloop as ioloop

import liz.monitor as monitor

parser = argparse.ArgumentParser()
parser.add_argument("--this-host", dest='this_host', help="The host name or IP of this host.  This *MUST* be unique.", required = True)
parser.add_argument("--publish", dest='destinations', nargs="+", help="Where you want to publish the performance data", required = True)
parser.add_argument("--interval", dest='interval_seconds', type = int, help="How often, in seconds, to publush the data", default = 1)
args = parser.parse_args()

def handle_response(url, resp):
    if resp.error:
        print("ERROR:  Publish failed to %s, details:  %s" % (url, resp.error))
    else:
        print("INFO:  Publish was successful to %s" % url)

def publish_statistics(this_host, url):
    client = http.HTTPClient()
    try:
        ts, data = monitor.gather_stats()
        data = json.dumps(data)
        if not url.endswith("/") or url == "":
            url += "/"
        url += "%s/%d" % (this_host, ts)
        req = http.HTTPRequest(url, method="POST", body=data)
        response = client.fetch(req, callback=functools.partial(handle_response, url))
    except http.HTTPError as e:
        print("Error: " + str(e))
    except Exception as e:
        print("Error: " + str(e))
    finally:
        client.close()

def publish_statitstics_all_destinations(this_host, urls):
    for url in urls:
        ioloop.IOLoop.instance().add_callback(publish_statistics, this_host, url)

callback_interval_milliseconds = args.interval_seconds * 1000
periodic_callback = ioloop.PeriodicCallback(
        functools.partial(publish_statitstics_all_destinations, args.this_host, args.destinations),
        callback_interval_milliseconds)
periodic_callback.start()
ioloop.IOLoop.instance().start()
