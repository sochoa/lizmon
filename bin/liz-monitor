#!/usr/bin/env python3
# :vim set ft=python

import functools
import argparse
import json

import tornado.httpclient as httpclient
import tornado.ioloop as ioloop

import liz.monitor as monitor

parser = argparse.ArgumentParser()
parser.add_argument("--publish", dest='destinations', nargs="+", help="Where you want to publish the performance data", required = True)
parser.add_argument("--interval", dest='interval_seconds', type = int, help="How often, in seconds, to publush the data", default = 1)
args = parser.parse_args()

def handle_response(url, resp):
    if resp.error:
        print("ERROR:  Publish failed to %s, details:  %s", (url, resp.error))
    else:
        print("INFO:  Publish was successful to %s, response:  %s", (url, resp.body))

def publish_statics(url):
    with http.HTTPClient() as http:
        try:
            data = json.dumps(monitor.gather_stats())
            req = http.HTTPRequest(url, method="POST", body=data)
            response = http.fetch(req, callback=functools.partial(handle_response, url))
        except httpclient.HTTPError as e:
            print("Error: " + str(e))
        except Exception as e:
            print("Error: " + str(e))

def publish_statitstics_all_destinations(urls):
    for url in urls:
        ioloop.IOLoop.instance().add_callback(publish_statitstics, url)

callback_interval_milliseconds = args.interval * 1000
periodic_callback = ioloop.PeriodicCallback(
        functools.partial(publish_statitstics_all_destinations, args.destinations),
        callback_interval_milliseconds)
ioloop.IOLoop.instance().start()
periodic_callback.start()
